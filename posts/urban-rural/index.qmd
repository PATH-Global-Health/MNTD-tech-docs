---
title: "Defining urban areas based on population density rasters"
author: "Hayley Thompson"
date: "12/20/2022"
categories: [R, raster, urbanization]
image: "image.jpg"
toc: true
format:
  html:
    code-fold: false
    code-tools: true
execute:
  warning: false
  message: false
---

## Installing the `CHWplacement` package

This process uses an R package developed by Clara Champagne at SwissTPH called [`CHWplacement`](https://swisstph.github.io/CHWplacement), associated with the following publication: [`Improving access to care and community health in Haiti with optimized community health worker placement`](https://journals.plos.org/globalpublichealth/article?id=10.1371/journal.pgph.0000167), *Champagne C., Rajkumar A. S. , Auxila P., Perrone G., Plötz M., Young A., Bazaz Jazayeri S., Napier H., Le Menach A., Battle K., Cameron E., Alfred J.P., Deslouches Y.G., Pothin E., Plos Global Public Health 2022.*

This package is hosted on Github, so we have to use the `devtools` package to install it (you may need to install this package first).

```{r}
#| eval: false
#| include: true
#| label: install-chwplacement

devtools::install_github("SwissTPH/CHWplacement")  
```

The primary function in this package that we will use is [`DefineUrban()`](https://swisstph.github.io/CHWplacement/reference/DefineUrban.html), which defines rural and urban areas based on population density.

The function requires a population density raster which is a gridded population surface, representing population distribution. We will download this from the [`GRID3`](https://grid3.org/) data repository.

## Downloading GRID3 population rasters

We will use Senegal as an example - the download links for other countries with GRID3 population data avaliable are commented out in the code block below for reference.

First we load some useful packages for working with rasters and shapefiles, then we will download the populaiton raster file for Senegal. The GRID3 population raster is at a resolution of 100m so we need to use the `aggregate()` function from the `terra` package to combine grid cells to a spatial resolution of 1km grid cells for input into the `DefineUrban()` function.

```{r, fig.height=5, fig.width=11}
#| message: false
#| warning: false
library(raster)        # Raster package
library(terra)         # Terra package
library(exactextractr) # exactextractr package
library(sf)            # Shapefile package
library(CHWplacement)  # CHWplacement pakacge
library(tidyverse)     # Tidyverse 
library(tidyterra)     # Tidyverse methods for terra objects
library(ggforce)       # ggforce package for facet zooming 
library(PATHtools)     # PATHtools package for retriving shapefiles
library(fs)            # file system package

# Load reference shapefile
shp <- PATHtools::load_shapefile(country = "Senegal", admin_level = 1)

# Grid3 raster URL 
url <- "https://wopr.worldpop.org/download/502" # url for Senegal raster

#  Sierra Leone: https://wopr.worldpop.org/download/473
#  South Sudan: https://wopr.worldpop.org/download/344
#  Mozambique: https://wopr.worldpop.org/download/237
#  DRC - Kinshasa, Kongo-Central, Kwango, Kwilu, and Mai-Ndombe provinces: https://wopr.worldpop.org/download/113
#  DRC - Haut-Katanga, Haut-Lomami, Ituri, Kasaï, Kasaï Oriental, Lomami and Sud-Kivu provinces: https://wopr.worldpop.org/download/488
#  Niger: https://wopr.worldpop.org/download/511
#  Burkina Faso: https://wopr.worldpop.org/download/515
#  Nigeria: https://wopr.worldpop.org/download/495
#  Zambia: https://wopr.worldpop.org/download/25

# Create a temporary folder for downloaded raster
dest <- tempdir()

# file name 
file_name <- fs::path(dest, "grid3-pop-raster.tif.gz")

# download and unzip the raster file 
utils::download.file(url = url, destfile = file_name, mode = "wb", quiet = TRUE)
R.utils::gunzip(file_name)

# load raster into R session
population_100m <- terra::rast(fs::path(dest, "grid3-pop-raster.tif")) 

# aggregate population raster from 100m grid cell resolution to 1km grid cell resolution == density per km^2
population_1km <- terra::aggregate(population_100m, fact=10, na.rm=TRUE, fun = "sum")

# plot population density per km 
ggplot() +
  geom_spatraster(data = population_1km) +
  scale_fill_whitebox_c(palette = "deep", direction = -1) +
  theme_grey() +
  labs(title = "GRID3 population per 1km Senegal 2020", fill=" ") +
  # geom_sf(data=sen_shp, col="red", fill=NA) +
  facet_zoom(xlim=c(-17,-17.6), ylim=c(14.5,15), horizontal = TRUE, shrink=TRUE, zoom.size =0.8) +
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid = element_blank())


```

The resulting plot displays the populated areas of Senegal with those areas in yellow representing the most densley populated areas with the zoomed in panel highlighting Dakar.

In this example I created a temporary folder (using the `tempdir()`) and saved it's "path" into an object called `dest`. This is where we will download rasters. You can swap `tempdir()` with a file path to a location on your computer. Or directly read in a raster if it is already avaliable on your computer.

## Classification of urban and rural areas

::: column-margin
![**Contigious grid cells.** The grid displays a central coloured cell surrounded by 8 other cells numbered 1 through 8. **four-point contiguity** would select grid cells 2,4,6 and 8 as contigious to the central cell. **eight-point contiguity** would select all grid cells 1 through 8 as contigious, as this definition also allows grid cells that are linked on the diagonal.](contig.jpg)
:::

The next step in this work is to use the `CHWplacement` pacakge to define urban areas. This is done using 1km² grid cells, classified according to their **population density**, **population size** and **contiguity** (neighbouring cells).

We will use the `DefineUrban()` fucntion. This function requires 3 inputs:

1.  **population.raster**: raster map containing population densities per 1km grid cells

2.  **rururb_cutoff**: indicates the minimum population density for each pixel considered as urban

3.  **min_urbsize**: indicates the minimum population in the total area of contiguous selected pixels to be considered as urban

The identification of urban areas then occurs in two steps, first all cells with a population density of over `runurb_cutoff` are selected and then groups of contigious cells are identified using eight-point contiguity, in other words, including diagonals. Contigious cells are grouped together and each group with a collective population size of over `min_urbsize` are defined as urban.

For this example we use a population density threshold of 300 people per square km (`rururb_cutoff`) and a minimum population size (`min_urbsize`) of 10,000 people.

These values were selected based on the smallest population density threshold used to define an urban area from the Level 1 definitions in [`Eurostat: Applying the Degree of Urbanisation — A methodological manual to define cities, towns and rural areas for international comparisons — 2021 edition`](https://ec.europa.eu/eurostat/en/web/products-manuals-and-guidelines/-/ks-02-20-499) and the value of 10,000 came from the national definition of an urban area as listed in the [`UN Demographic Year Book 2021`](https://unstats.un.org/unsd/demographic-social/products/dyb/documents/dyb2021/Notes06.pdf).

For performing this analysis for another country users can use the threshold values from the Eurostat manual, or if a national threshold is provided the user can select these. The manual uses two definitions of urban at a level 1 classification.

1.  **Urban centre** (high density cluster) - a cluster of contiguous grid cells of 1km² (using four-point contiguity, in other words, excluding diagonals. *As the CHWpackage function uses eight-point contiguity the function will have to be editied by the user to perform this.*) with a population density of at least 1,500 inhabitants per km² and collectively a minimum population of 50,000 inhabitants before gap-filling.

2.  **Urban cluster** (moderate-density cluster) --- a cluster of contiguous grid cells of 1 km² (using eight-point contiguity, in other words, including diagonals) with a population density of at least 300 inhabitants per km² and a minimum population of 5,000 inhabitants.

The following code shows how we can take the population raster input and the thresholds we have defined to produce an output raster that defines grid cells as urban or rural.

```{r}
# first need to convert spatial raster to raster layer to work with the DefineUrban function 
population_1km_r <- population_1km %>% raster::raster()

# run function to define urban clusters
ur <- DefineUrban(population_1km_r, min_urbsize = 10000, rururb_cutoff = 300)

```

The function outputs a new raster which we have saved as an object in our R session called `ur`. This raster is similar to population.raster input but all non-urban pixels are masked (i.e. NA). The function call also outputs the proportion of the total population that live in urban areas. We can take this a step further and examine the rates of urbanisation at smaller spatial scales.

## Calculating the proportion of the population in a spatial area defined by an input shape file

To calcualte the proportion of the population in a spatial region that live in urban or rural areas we first need a shape file with defined boundaries e.g. administrative units or health facility catchment areas.

For this example we will use a shapefile of the 14 regions of Senegal.

```{r}

# for ID-ing regions
sf_tibble <- tibble::as_tibble(sf::st_drop_geometry(shp))

# extract the full GRID3 population to regions 
regional_pop <-
    exactextractr::exact_extract(population_1km, shp, 'sum', progress = FALSE) %>% 
    dplyr::bind_cols(sf_tibble) %>% 
    dplyr::select(region = ADM1, total_pop = ...1)
  
# extract urban population to regions 
regional_urb_pop <- 
    exactextractr::exact_extract(ur, shp, 'sum', progress = FALSE) %>% 
    dplyr::bind_cols(sf_tibble) %>% 
    dplyr::select(region = ADM1, urban_pop = ...1)

# join dataframes together and calculate proportion of the population in urban areas per health district
urb_pop_prop <- 
  left_join(regional_pop, regional_urb_pop) %>% 
  mutate(prop_ur = urban_pop / total_pop) %>% 
  mutate(prop_ur = case_when(is.na(prop_ur) ~ 0, TRUE ~ prop_ur))

# plot the proportion of the population living in urban areas by region
shp_pop <- 
  shp %>% 
  janitor::clean_names() %>% 
  rename(region = adm1) %>% 
  left_join(urb_pop_prop) 

ggplot(shp_pop) +
  geom_sf(aes(fill=prop_ur), col=NA) +
  scale_fill_whitebox_c(palette= "deep") +
  theme_gray() +
  theme(axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        panel.grid = element_blank()) +
  labs(fill=" ", title="Proprtion of the population living in urban areas 2020")


```

## Creating an new raster that defines each grid cell as urban or rural

We can then transform the raster output from the `DefineUrban()` function so that all NA cells are reclassified as "rural" and those with population values are classified as "urban". The resulting raster highlighting urban areas defined by population density and size thresholds is shown below.

```{r}
# transform to spatraster format  
ur_raw <- terra::rast(ur)

# reclassification of grid cells 
ur_class <- app(ur_raw, fun=function(x){ x[x > 1] <- 1; return(x)} )
ur_class <- subst(ur_class, NA, 2) 
cls <- data.frame(id=c(1, 2), urban_rural=c("urban", "rural"))
levels(ur_class) <- cls

# crop the raster to the shape file outline of senegal to remove extra pixels that have been # classified as rural but are empty pixels outside country boundary
ur_class <- crop(ur_class, extent(shp))
ur_class <- mask(ur_class, shp)

# plot the resulting output 
ggplot() +
  geom_spatraster(data = ur_class) +
  theme_grey(12) +
  labs(title = " ", fill=" ", col=" ") +
  scale_fill_manual(values=c("#ed968c", "#4f7942"), 
                    labels=c("urban", "rural"), breaks=c("urban", "rural")) +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        legend.position="bottom")

```

If geo-location data is then avaliable, for example the co-ordinates of health facilities, hospitals, schools, pharmacies etc, then we can use this raster to classify these facilties and the communities they serve.

Here I create some example coordinates but users should upload their own coordinates of interest here. In this example we include a 2.5km buffer region around each point to account for potential heterogeneity that might be missed from taking just the point-level extraction.

```{r}
# example coordinates 
points <- data.frame(name = c("a", "b", "c", "d"), 
                     latitude = c(14.72810, 15.01430, 15.99420, 12.67370), 
                     longitude = c(-17.45910, -12.50030, -15.32010, -16.09250))

# transform to a spatial object 
points   <- sf::st_as_sf(points,                               # first argument = data frame with coordinates
                          coords = c("longitude", "latitude"),  # name of columns, in quotation marks
                          crs = 4326)                           # coordinate reference system to make sense of the numbers

# include a 2.5km buffer region around point location   
points_w_buffer <- terra::vect(points) %>% terra::buffer(width=2500) 

```

Because we include a buffer region we will then take the mode of the extracted cell values for each of our locations. The following function calculates and returns the mode of the categorical extraction variables.

```{r}
calculate_mode <- function(x) {
  uniqx <- unique(na.omit(x))
  uniqx[which.max(tabulate(match(x, uniqx)))]
}
```

Now we can run the extraction and examine the resulting classification.  

```{r, dpi=600}
# extraction
points_classification <- 
  terra::extract(ur_class, points_w_buffer) %>%
  dplyr::group_by(ID) %>%
  dplyr::summarise(dplyr::across(dplyr::everything(), list)) %>%
  tidyr::unnest(cols = c(urban_rural)) %>%
  dplyr::group_by(ID) %>%
  dplyr::summarize(classification = calculate_mode(urban_rural)) 

# as a spatial object
points_classification_sf <- bind_cols(points, points_classification)

# plot 
ggplot() +
  geom_spatraster(data = ur_class) +
  geom_sf(data = points_classification_sf, mapping=aes(col=classification), shape = 19,
          fill=NA, size=1)+
  theme_grey(12) +
  labs(title = "", fill=" ", col=" ") +
  scale_color_manual(values=c("#b01f35", "#e4efe9"),
                     labels=c("urban", "rural"), breaks=c("urban", "rural")) +
  scale_fill_manual(values=c("#ed968c", "#4f7942"), 
                    labels=c("urban", "rural"), breaks=c("urban", "rural")) +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        legend.position="bottom")

```

